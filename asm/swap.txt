// main
call [3, 0]
mov sp[-2], sp[-2]

in sp[-3]
in sp[-4]

call [9, 4]
mov sp[-2], sp[-2]
call [6, 6]
halt

.loc [1, 0] // input list

mov sp[-2], reg[0]
mov reg[0], 0 // sp[0] holds the length of list

in ram[reg[0]]
cmp ram[reg[0]], 100
add reg[0], 1
jne -3
sub reg[0], 1

mov sp[-1], reg[0]
mov reg[0], sp[-2]
ret 9

.loc [2, 0] // print list

mov sp[-2], reg[0]
mov sp[-3], reg[1]
mov reg[0], sp[-1]

sub reg[0], 1
.l1
add reg[1], 1
out ram[reg[1]]
cmp reg[1], reg[0]
jle l1
mov reg[0], sp[-2]
mov reg[1], sp[-3]

ret 10

.loc [3, 0] // swap algorithm

// sp[-1] and sp[-2] will hold the indices in ram that are to be swapped

mov sp[-4], reg[0]
mov sp[-5], reg[1]
mov sp[-6], reg[2] // temp variable

mov reg[0], sp[-2]
mov reg[1], sp[-3]

mov reg[2], ram[reg[0]]
mov ram[reg[0]], ram[reg[1]]
mov ram[reg[1]], reg[2]

mov reg[0], sp[-4]
mov reg[1], sp[-5]
mov reg[2], sp[-6]

ret 11


